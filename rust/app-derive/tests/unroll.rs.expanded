#![feature(prelude_import)]
//! Test the unroll macro
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use std::path::PathBuf;
use arrayref::array_ref;
use bolos::PIC;
use ledger_tezos_derive::unroll;
use serde::{Deserialize, Serialize};
pub struct BakerNotFound;
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::core::fmt::Debug for BakerNotFound {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match *self {
            BakerNotFound => {
                let debug_trait_builder =
                    &mut ::core::fmt::Formatter::debug_tuple(f, "BakerNotFound");
                ::core::fmt::DebugTuple::finish(debug_trait_builder)
            }
        }
    }
}
pub fn baker_lookup(prefix: &[u8; 3], hash: &[u8; 20]) -> Result<&'static str, BakerNotFound> {
    let out = match (prefix, hash) {
        (
            &[6u8, 161u8, 159u8],
            &[207u8, 73u8, 246u8, 107u8, 158u8, 161u8, 55u8, 225u8, 24u8, 24u8, 242u8, 167u8, 139u8, 75u8, 111u8, 201u8, 137u8, 91u8, 78u8, 80u8],
        ) => "Obsidian",
        (
            &[6u8, 161u8, 159u8],
            &[83u8, 26u8, 181u8, 118u8, 74u8, 41u8, 247u8, 124u8, 93u8, 64u8, 184u8, 10u8, 93u8, 164u8, 92u8, 132u8, 70u8, 143u8, 8u8, 161u8],
        ) => "Tezos Capital Legacy",
        (
            &[6u8, 161u8, 159u8],
            &[89u8, 102u8, 120u8, 109u8, 163u8, 133u8, 28u8, 91u8, 36u8, 237u8, 60u8, 154u8, 128u8, 216u8, 58u8, 39u8, 145u8, 88u8, 136u8, 53u8],
        ) => "Crypto Delegate",
        (
            &[6u8, 161u8, 159u8],
            &[115u8, 219u8, 59u8, 149u8, 92u8, 106u8, 126u8, 14u8, 45u8, 231u8, 12u8, 18u8, 110u8, 0u8, 21u8, 8u8, 73u8, 10u8, 47u8, 221u8],
        ) => "Happy Tezos",
        (
            &[6u8, 161u8, 164u8],
            &[194u8, 254u8, 152u8, 100u8, 42u8, 189u8, 11u8, 125u8, 212u8, 188u8, 15u8, 196u8, 46u8, 10u8, 95u8, 124u8, 135u8, 186u8, 86u8, 252u8],
        ) => "At James",
        (
            &[6u8, 161u8, 159u8],
            &[111u8, 37u8, 109u8, 222u8, 242u8, 59u8, 38u8, 67u8, 63u8, 151u8, 14u8, 133u8, 108u8, 31u8, 154u8, 234u8, 17u8, 52u8, 206u8, 228u8],
        ) => "Lucid Mining",
        (
            &[6u8, 161u8, 159u8],
            &[37u8, 35u8, 37u8, 11u8, 39u8, 30u8, 21u8, 59u8, 230u8, 194u8, 102u8, 137u8, 84u8, 17u8, 75u8, 225u8, 1u8, 208u8, 77u8, 61u8],
        ) => "P2P Validator",
        (
            &[6u8, 161u8, 159u8],
            &[34u8, 196u8, 90u8, 36u8, 203u8, 55u8, 218u8, 151u8, 190u8, 51u8, 76u8, 15u8, 112u8, 134u8, 95u8, 148u8, 108u8, 182u8, 144u8, 45u8],
        ) => "Bake\'n\'Rolls",
        (
            &[6u8, 161u8, 159u8],
            &[224u8, 217u8, 159u8, 96u8, 88u8, 223u8, 163u8, 110u8, 186u8, 102u8, 3u8, 86u8, 75u8, 47u8, 41u8, 9u8, 24u8, 234u8, 110u8, 167u8],
        ) => "StakeNow",
        (
            &[6u8, 161u8, 159u8],
            &[179u8, 242u8, 243u8, 253u8, 117u8, 241u8, 208u8, 61u8, 103u8, 55u8, 193u8, 75u8, 102u8, 199u8, 132u8, 180u8, 158u8, 30u8, 142u8, 24u8],
        ) => "TezosBC",
        (
            &[6u8, 161u8, 159u8],
            &[131u8, 196u8, 27u8, 143u8, 45u8, 183u8, 250u8, 68u8, 6u8, 151u8, 233u8, 41u8, 239u8, 197u8, 133u8, 134u8, 130u8, 121u8, 124u8, 12u8],
        ) => "XTZ Delegate",
        (
            &[6u8, 161u8, 159u8],
            &[10u8, 246u8, 179u8, 94u8, 104u8, 18u8, 177u8, 188u8, 134u8, 96u8, 163u8, 8u8, 39u8, 169u8, 121u8, 76u8, 152u8, 162u8, 248u8, 115u8],
        ) => "PayTezos",
        (
            &[6u8, 161u8, 164u8],
            &[156u8, 228u8, 162u8, 125u8, 184u8, 206u8, 125u8, 89u8, 214u8, 10u8, 68u8, 173u8, 62u8, 211u8, 208u8, 190u8, 120u8, 88u8, 158u8, 255u8],
        ) => "Tezzigator",
        (
            &[6u8, 161u8, 159u8],
            &[191u8, 112u8, 5u8, 38u8, 119u8, 126u8, 123u8, 232u8, 81u8, 154u8, 92u8, 55u8, 158u8, 201u8, 234u8, 115u8, 11u8, 39u8, 138u8, 3u8],
        ) => "My Tezos Baking",
        (
            &[6u8, 161u8, 159u8],
            &[166u8, 186u8, 184u8, 253u8, 61u8, 97u8, 133u8, 16u8, 154u8, 28u8, 143u8, 138u8, 244u8, 23u8, 1u8, 245u8, 56u8, 141u8, 199u8, 35u8],
        ) => "LetzBake!",
        (
            &[6u8, 161u8, 159u8],
            &[1u8, 74u8, 251u8, 78u8, 216u8, 68u8, 153u8, 129u8, 170u8, 191u8, 102u8, 99u8, 101u8, 239u8, 106u8, 86u8, 176u8, 78u8, 153u8, 86u8],
        ) => "Bakednode",
        (
            &[6u8, 161u8, 159u8],
            &[114u8, 130u8, 62u8, 236u8, 145u8, 105u8, 185u8, 172u8, 205u8, 190u8, 227u8, 81u8, 240u8, 245u8, 68u8, 197u8, 53u8, 113u8, 254u8, 187u8],
        ) => "Tezgate",
        (
            &[6u8, 161u8, 159u8],
            &[185u8, 130u8, 50u8, 134u8, 128u8, 45u8, 146u8, 43u8, 75u8, 226u8, 75u8, 21u8, 248u8, 78u8, 106u8, 94u8, 131u8, 158u8, 145u8, 183u8],
        ) => "BAKER-IL",
        (
            &[6u8, 161u8, 159u8],
            &[17u8, 68u8, 43u8, 248u8, 78u8, 49u8, 229u8, 168u8, 160u8, 64u8, 245u8, 84u8, 55u8, 219u8, 1u8, 199u8, 8u8, 11u8, 32u8, 102u8],
        ) => "Stack Tezos",
        (
            &[6u8, 161u8, 161u8],
            &[75u8, 124u8, 64u8, 79u8, 212u8, 251u8, 207u8, 147u8, 28u8, 222u8, 10u8, 137u8, 113u8, 202u8, 247u8, 111u8, 83u8, 200u8, 229u8, 192u8],
        ) => "Stake.fish",
        (
            &[6u8, 161u8, 159u8],
            &[20u8, 168u8, 85u8, 18u8, 101u8, 38u8, 53u8, 75u8, 148u8, 115u8, 219u8, 205u8, 87u8, 57u8, 59u8, 24u8, 92u8, 154u8, 5u8, 161u8],
        ) => "Everstake Legacy",
        (
            &[6u8, 161u8, 159u8],
            &[132u8, 87u8, 19u8, 156u8, 221u8, 54u8, 145u8, 81u8, 239u8, 95u8, 60u8, 60u8, 129u8, 71u8, 60u8, 102u8, 83u8, 30u8, 221u8, 91u8],
        ) => "Anonstake",
        (
            &[6u8, 161u8, 161u8],
            &[167u8, 242u8, 255u8, 71u8, 98u8, 248u8, 242u8, 106u8, 172u8, 128u8, 34u8, 29u8, 115u8, 190u8, 103u8, 112u8, 157u8, 234u8, 29u8, 20u8],
        ) => "Tezos Capital",
        (
            &[6u8, 161u8, 159u8],
            &[2u8, 208u8, 224u8, 46u8, 37u8, 58u8, 204u8, 142u8, 65u8, 93u8, 42u8, 184u8, 138u8, 111u8, 163u8, 27u8, 234u8, 56u8, 45u8, 6u8],
        ) => "Ø Crypto Pool",
        (
            &[6u8, 161u8, 159u8],
            &[209u8, 45u8, 147u8, 117u8, 190u8, 195u8, 59u8, 155u8, 250u8, 183u8, 227u8, 7u8, 45u8, 230u8, 211u8, 255u8, 1u8, 228u8, 20u8, 230u8],
        ) => "Bake Tz",
        (
            &[6u8, 161u8, 159u8],
            &[87u8, 108u8, 42u8, 182u8, 191u8, 205u8, 91u8, 223u8, 136u8, 203u8, 252u8, 7u8, 232u8, 31u8, 160u8, 254u8, 138u8, 137u8, 196u8, 6u8],
        ) => "XTZ Antipodes",
        (
            &[6u8, 161u8, 159u8],
            &[218u8, 116u8, 27u8, 23u8, 156u8, 155u8, 64u8, 91u8, 185u8, 134u8, 212u8, 55u8, 105u8, 128u8, 210u8, 41u8, 92u8, 250u8, 58u8, 98u8],
        ) => "Tezos Bakery",
        (
            &[6u8, 161u8, 159u8],
            &[78u8, 157u8, 74u8, 159u8, 119u8, 190u8, 47u8, 87u8, 239u8, 41u8, 24u8, 186u8, 114u8, 249u8, 164u8, 252u8, 183u8, 185u8, 37u8, 212u8],
        ) => "Hayek Lab",
        (
            &[6u8, 161u8, 159u8],
            &[232u8, 18u8, 135u8, 164u8, 9u8, 1u8, 233u8, 75u8, 180u8, 32u8, 181u8, 122u8, 24u8, 38u8, 1u8, 78u8, 97u8, 217u8, 115u8, 218u8],
        ) => "Stakery",
        (
            &[6u8, 161u8, 159u8],
            &[34u8, 228u8, 10u8, 93u8, 202u8, 171u8, 186u8, 238u8, 105u8, 22u8, 93u8, 138u8, 80u8, 37u8, 177u8, 35u8, 239u8, 98u8, 200u8, 243u8],
        ) => "Gate.io",
        (
            &[6u8, 161u8, 159u8],
            &[30u8, 126u8, 224u8, 210u8, 32u8, 77u8, 247u8, 203u8, 30u8, 118u8, 101u8, 86u8, 53u8, 104u8, 227u8, 160u8, 99u8, 66u8, 240u8, 172u8],
        ) => "Bake ꜩ For Me",
        (
            &[6u8, 161u8, 159u8],
            &[185u8, 238u8, 31u8, 62u8, 56u8, 211u8, 86u8, 41u8, 231u8, 189u8, 99u8, 206u8, 39u8, 30u8, 194u8, 84u8, 38u8, 126u8, 29u8, 113u8],
        ) => "Mint Capital",
        (
            &[6u8, 161u8, 159u8],
            &[19u8, 87u8, 134u8, 251u8, 158u8, 132u8, 123u8, 222u8, 221u8, 224u8, 27u8, 16u8, 23u8, 246u8, 104u8, 89u8, 145u8, 14u8, 137u8, 173u8],
        ) => "Tezmania",
        (
            &[6u8, 161u8, 159u8],
            &[146u8, 187u8, 211u8, 188u8, 172u8, 83u8, 187u8, 108u8, 212u8, 87u8, 230u8, 45u8, 90u8, 64u8, 235u8, 230u8, 217u8, 106u8, 4u8, 36u8],
        ) => "XTZ Land",
        (
            &[6u8, 161u8, 159u8],
            &[139u8, 33u8, 209u8, 58u8, 171u8, 13u8, 142u8, 114u8, 83u8, 189u8, 40u8, 130u8, 124u8, 35u8, 132u8, 152u8, 160u8, 89u8, 9u8, 98u8],
        ) => "TezosBr",
        (
            &[6u8, 161u8, 159u8],
            &[69u8, 208u8, 34u8, 242u8, 63u8, 80u8, 35u8, 129u8, 243u8, 82u8, 133u8, 248u8, 27u8, 193u8, 63u8, 36u8, 227u8, 126u8, 50u8, 236u8],
        ) => "Tezos Mars",
        (
            &[6u8, 161u8, 159u8],
            &[165u8, 100u8, 72u8, 91u8, 42u8, 150u8, 23u8, 214u8, 254u8, 153u8, 227u8, 128u8, 28u8, 161u8, 123u8, 72u8, 244u8, 183u8, 80u8, 126u8],
        ) => "View Nodes",
        (
            &[6u8, 161u8, 159u8],
            &[0u8, 47u8, 231u8, 219u8, 82u8, 24u8, 161u8, 214u8, 116u8, 200u8, 141u8, 217u8, 217u8, 66u8, 26u8, 198u8, 11u8, 142u8, 179u8, 229u8],
        ) => "Tezos Seoul",
        (
            &[6u8, 161u8, 159u8],
            &[18u8, 84u8, 143u8, 113u8, 153u8, 76u8, 178u8, 206u8, 24u8, 7u8, 45u8, 13u8, 203u8, 86u8, 143u8, 227u8, 95u8, 183u8, 73u8, 48u8],
        ) => "AirGap",
        (
            &[6u8, 161u8, 159u8],
            &[170u8, 21u8, 174u8, 200u8, 164u8, 55u8, 30u8, 109u8, 205u8, 0u8, 252u8, 117u8, 114u8, 181u8, 204u8, 104u8, 63u8, 33u8, 48u8, 163u8],
        ) => "TezosRUs",
        (
            &[6u8, 161u8, 159u8],
            &[172u8, 70u8, 223u8, 63u8, 225u8, 250u8, 187u8, 140u8, 241u8, 70u8, 224u8, 209u8, 134u8, 107u8, 79u8, 19u8, 147u8, 133u8, 58u8, 161u8],
        ) => "Tezos Hot Bakery",
        (
            &[6u8, 161u8, 159u8],
            &[7u8, 161u8, 97u8, 129u8, 237u8, 246u8, 16u8, 6u8, 253u8, 93u8, 72u8, 198u8, 72u8, 223u8, 79u8, 255u8, 31u8, 78u8, 137u8, 45u8],
        ) => "TezoSteam",
        (
            &[6u8, 161u8, 159u8],
            &[239u8, 94u8, 117u8, 208u8, 15u8, 141u8, 68u8, 229u8, 180u8, 0u8, 200u8, 219u8, 127u8, 118u8, 193u8, 29u8, 198u8, 76u8, 71u8, 97u8],
        ) => "Tezos Chef",
        (
            &[6u8, 161u8, 159u8],
            &[176u8, 195u8, 192u8, 30u8, 224u8, 152u8, 99u8, 39u8, 149u8, 166u8, 127u8, 114u8, 108u8, 238u8, 155u8, 176u8, 110u8, 145u8, 229u8, 190u8],
        ) => "Tz Bank",
        (
            &[6u8, 161u8, 159u8],
            &[3u8, 219u8, 239u8, 53u8, 252u8, 222u8, 8u8, 74u8, 36u8, 108u8, 240u8, 205u8, 237u8, 185u8, 247u8, 163u8, 158u8, 77u8, 54u8, 104u8],
        ) => "HashQuark",
        (
            &[6u8, 161u8, 159u8],
            &[249u8, 26u8, 39u8, 172u8, 129u8, 103u8, 166u8, 13u8, 139u8, 132u8, 192u8, 166u8, 50u8, 154u8, 242u8, 131u8, 55u8, 61u8, 225u8, 180u8],
        ) => "Wetez",
        (
            &[6u8, 161u8, 159u8],
            &[143u8, 59u8, 187u8, 17u8, 67u8, 215u8, 164u8, 119u8, 158u8, 21u8, 29u8, 97u8, 19u8, 240u8, 73u8, 89u8, 190u8, 243u8, 215u8, 150u8],
        ) => "Tez Baguette",
        (
            &[6u8, 161u8, 159u8],
            &[176u8, 178u8, 128u8, 244u8, 89u8, 250u8, 170u8, 49u8, 73u8, 36u8, 26u8, 68u8, 135u8, 130u8, 149u8, 174u8, 8u8, 209u8, 117u8, 141u8],
        ) => "Tezos Tacos",
        (
            &[6u8, 161u8, 159u8],
            &[185u8, 44u8, 134u8, 233u8, 130u8, 206u8, 30u8, 230u8, 101u8, 43u8, 155u8, 196u8, 162u8, 255u8, 110u8, 222u8, 217u8, 242u8, 12u8, 244u8],
        ) => "Tz Bakery",
        (
            &[6u8, 161u8, 159u8],
            &[11u8, 167u8, 186u8, 208u8, 169u8, 248u8, 13u8, 16u8, 171u8, 244u8, 40u8, 11u8, 186u8, 132u8, 33u8, 99u8, 192u8, 91u8, 90u8, 3u8],
        ) => "Tez Baker",
        (
            &[6u8, 161u8, 159u8],
            &[0u8, 58u8, 150u8, 112u8, 153u8, 1u8, 49u8, 154u8, 93u8, 162u8, 150u8, 135u8, 130u8, 39u8, 157u8, 174u8, 88u8, 27u8, 155u8, 164u8],
        ) => "XTZ Master",
        (
            &[6u8, 161u8, 159u8],
            &[47u8, 55u8, 82u8, 227u8, 227u8, 255u8, 120u8, 243u8, 13u8, 188u8, 72u8, 115u8, 81u8, 181u8, 164u8, 85u8, 179u8, 82u8, 143u8, 70u8],
        ) => "Validators.com",
        (
            &[6u8, 161u8, 159u8],
            &[161u8, 31u8, 36u8, 160u8, 191u8, 15u8, 115u8, 127u8, 26u8, 8u8, 55u8, 231u8, 133u8, 196u8, 6u8, 3u8, 245u8, 217u8, 155u8, 170u8],
        ) => "Tezos Canada",
        (
            &[6u8, 161u8, 159u8],
            &[124u8, 193u8, 27u8, 53u8, 54u8, 29u8, 48u8, 201u8, 226u8, 250u8, 21u8, 117u8, 16u8, 27u8, 168u8, 143u8, 10u8, 195u8, 21u8, 163u8],
        ) => "ownBLOCK (OLD)",
        (
            &[6u8, 161u8, 159u8],
            &[42u8, 101u8, 33u8, 54u8, 179u8, 91u8, 83u8, 248u8, 133u8, 157u8, 173u8, 157u8, 15u8, 22u8, 200u8, 143u8, 128u8, 69u8, 166u8, 189u8],
        ) => "Melange",
        (
            &[6u8, 161u8, 159u8],
            &[231u8, 125u8, 197u8, 156u8, 76u8, 243u8, 211u8, 101u8, 228u8, 14u8, 208u8, 22u8, 150u8, 101u8, 249u8, 89u8, 17u8, 252u8, 236u8, 109u8],
        ) => "Airfoil",
        (
            &[6u8, 161u8, 159u8],
            &[38u8, 112u8, 85u8, 94u8, 90u8, 202u8, 90u8, 119u8, 68u8, 172u8, 232u8, 141u8, 199u8, 7u8, 99u8, 240u8, 218u8, 181u8, 217u8, 76u8],
        ) => "XTZ Bakery I",
        (
            &[6u8, 161u8, 159u8],
            &[251u8, 98u8, 134u8, 160u8, 149u8, 69u8, 140u8, 199u8, 164u8, 73u8, 89u8, 43u8, 50u8, 26u8, 94u8, 240u8, 251u8, 45u8, 111u8, 198u8],
        ) => "Tezzigator Legacy",
        (
            &[6u8, 161u8, 159u8],
            &[87u8, 14u8, 61u8, 78u8, 11u8, 230u8, 155u8, 147u8, 22u8, 49u8, 190u8, 101u8, 215u8, 89u8, 152u8, 192u8, 135u8, 215u8, 215u8, 156u8],
        ) => "Tezocracy",
        (
            &[6u8, 161u8, 159u8],
            &[180u8, 195u8, 121u8, 83u8, 206u8, 82u8, 98u8, 80u8, 200u8, 80u8, 138u8, 117u8, 194u8, 18u8, 224u8, 78u8, 88u8, 149u8, 123u8, 126u8],
        ) => "MyBakerSpace",
        (
            &[6u8, 161u8, 159u8],
            &[113u8, 200u8, 78u8, 93u8, 59u8, 242u8, 250u8, 170u8, 116u8, 39u8, 138u8, 95u8, 182u8, 27u8, 226u8, 39u8, 122u8, 224u8, 101u8, 116u8],
        ) => "Elite Tezos",
        (
            &[6u8, 161u8, 159u8],
            &[217u8, 160u8, 198u8, 14u8, 11u8, 87u8, 24u8, 184u8, 186u8, 179u8, 191u8, 97u8, 28u8, 10u8, 79u8, 187u8, 171u8, 76u8, 29u8, 196u8],
        ) => "Tezzieland",
        (
            &[6u8, 161u8, 159u8],
            &[147u8, 208u8, 163u8, 118u8, 13u8, 188u8, 74u8, 62u8, 116u8, 129u8, 45u8, 33u8, 39u8, 62u8, 92u8, 82u8, 195u8, 78u8, 215u8, 60u8],
        ) => "Tezos Bay",
        (
            &[6u8, 161u8, 159u8],
            &[115u8, 173u8, 63u8, 61u8, 191u8, 94u8, 82u8, 237u8, 71u8, 46u8, 55u8, 231u8, 226u8, 160u8, 40u8, 33u8, 201u8, 60u8, 249u8, 49u8],
        ) => "888 XTZ",
        (
            &[6u8, 161u8, 159u8],
            &[204u8, 4u8, 230u8, 93u8, 62u8, 56u8, 228u8, 232u8, 5u8, 144u8, 65u8, 242u8, 122u8, 100u8, 156u8, 118u8, 99u8, 15u8, 149u8, 226u8],
        ) => "Cryptium Labs",
        (
            &[6u8, 161u8, 159u8],
            &[60u8, 240u8, 180u8, 188u8, 249u8, 22u8, 36u8, 152u8, 25u8, 38u8, 131u8, 112u8, 42u8, 150u8, 220u8, 46u8, 30u8, 127u8, 159u8, 127u8],
        ) => "Staked",
        (
            &[6u8, 161u8, 159u8],
            &[10u8, 155u8, 210u8, 179u8, 133u8, 200u8, 61u8, 121u8, 101u8, 93u8, 65u8, 254u8, 86u8, 50u8, 171u8, 238u8, 246u8, 120u8, 118u8, 84u8],
        ) => "Dash Master",
        (
            &[6u8, 161u8, 159u8],
            &[218u8, 213u8, 94u8, 130u8, 124u8, 112u8, 223u8, 150u8, 240u8, 188u8, 222u8, 118u8, 229u8, 34u8, 22u8, 95u8, 180u8, 60u8, 73u8, 102u8],
        ) => "Tezos.nu",
        (
            &[6u8, 161u8, 159u8],
            &[169u8, 189u8, 242u8, 62u8, 27u8, 165u8, 209u8, 228u8, 85u8, 60u8, 188u8, 183u8, 132u8, 147u8, 255u8, 132u8, 12u8, 65u8, 226u8, 11u8],
        ) => "Tezos Japan",
        (
            &[6u8, 161u8, 159u8],
            &[12u8, 101u8, 98u8, 235u8, 5u8, 126u8, 119u8, 205u8, 30u8, 217u8, 48u8, 144u8, 99u8, 12u8, 140u8, 243u8, 147u8, 95u8, 231u8, 12u8],
        ) => "Blockpower",
        (
            &[6u8, 161u8, 159u8],
            &[96u8, 244u8, 114u8, 48u8, 94u8, 72u8, 202u8, 146u8, 211u8, 42u8, 186u8, 146u8, 199u8, 180u8, 141u8, 136u8, 160u8, 81u8, 228u8, 114u8],
        ) => "Tez Patisserie",
        (
            &[6u8, 161u8, 159u8],
            &[154u8, 77u8, 223u8, 177u8, 98u8, 189u8, 255u8, 47u8, 125u8, 75u8, 205u8, 251u8, 163u8, 196u8, 27u8, 153u8, 197u8, 82u8, 152u8, 111u8],
        ) => "TZ Bake",
        (
            &[6u8, 161u8, 159u8],
            &[254u8, 156u8, 238u8, 227u8, 148u8, 178u8, 104u8, 128u8, 233u8, 120u8, 253u8, 64u8, 153u8, 103u8, 248u8, 192u8, 216u8, 76u8, 146u8, 58u8],
        ) => "Coinbase Custody",
        (
            &[6u8, 161u8, 159u8],
            &[59u8, 205u8, 125u8, 5u8, 198u8, 13u8, 142u8, 75u8, 62u8, 74u8, 107u8, 70u8, 27u8, 190u8, 186u8, 24u8, 88u8, 219u8, 85u8, 86u8],
        ) => "TezosSEAsia",
        (
            &[6u8, 161u8, 159u8],
            &[198u8, 47u8, 109u8, 220u8, 152u8, 27u8, 137u8, 28u8, 183u8, 71u8, 236u8, 171u8, 109u8, 137u8, 149u8, 188u8, 41u8, 228u8, 1u8, 6u8],
        ) => "Tezzz",
        (
            &[6u8, 161u8, 159u8],
            &[153u8, 94u8, 14u8, 153u8, 26u8, 211u8, 153u8, 240u8, 92u8, 21u8, 211u8, 54u8, 83u8, 212u8, 167u8, 194u8, 137u8, 198u8, 0u8, 137u8],
        ) => "Tezz City",
        (
            &[6u8, 161u8, 159u8],
            &[108u8, 161u8, 59u8, 228u8, 132u8, 106u8, 135u8, 181u8, 97u8, 78u8, 160u8, 103u8, 193u8, 118u8, 218u8, 227u8, 201u8, 144u8, 18u8, 149u8],
        ) => "Tezos Tokyo",
        (
            &[6u8, 161u8, 159u8],
            &[174u8, 227u8, 94u8, 64u8, 223u8, 86u8, 79u8, 40u8, 9u8, 51u8, 4u8, 204u8, 54u8, 14u8, 160u8, 243u8, 196u8, 141u8, 42u8, 56u8],
        ) => "Tez Milk",
        (
            &[6u8, 161u8, 159u8],
            &[142u8, 113u8, 81u8, 126u8, 97u8, 167u8, 56u8, 134u8, 2u8, 6u8, 117u8, 2u8, 168u8, 194u8, 170u8, 49u8, 40u8, 13u8, 25u8, 96u8],
        ) => "Norn Delegate",
        (
            &[6u8, 161u8, 159u8],
            &[43u8, 250u8, 152u8, 171u8, 95u8, 108u8, 67u8, 131u8, 194u8, 28u8, 1u8, 62u8, 223u8, 131u8, 103u8, 81u8, 41u8, 76u8, 46u8, 38u8],
        ) => "Tezos Panda",
        (
            &[6u8, 161u8, 159u8],
            &[222u8, 112u8, 67u8, 212u8, 7u8, 238u8, 151u8, 233u8, 177u8, 41u8, 13u8, 130u8, 99u8, 62u8, 24u8, 233u8, 170u8, 64u8, 211u8, 219u8],
        ) => "Steaker",
        (
            &[6u8, 161u8, 159u8],
            &[112u8, 120u8, 137u8, 166u8, 34u8, 51u8, 155u8, 92u8, 240u8, 68u8, 125u8, 135u8, 229u8, 249u8, 249u8, 63u8, 42u8, 56u8, 114u8, 81u8],
        ) => "TezTech Labs",
        (
            &[6u8, 161u8, 159u8],
            &[51u8, 137u8, 121u8, 111u8, 59u8, 124u8, 136u8, 59u8, 83u8, 177u8, 7u8, 27u8, 194u8, 131u8, 3u8, 171u8, 233u8, 185u8, 62u8, 120u8],
        ) => "Fresh Tezos",
        (
            &[6u8, 161u8, 159u8],
            &[156u8, 148u8, 208u8, 111u8, 111u8, 194u8, 196u8, 90u8, 147u8, 39u8, 236u8, 124u8, 88u8, 22u8, 124u8, 166u8, 93u8, 121u8, 76u8, 152u8],
        ) => "SNZ Holding",
        (
            &[6u8, 161u8, 159u8],
            &[95u8, 27u8, 225u8, 54u8, 55u8, 171u8, 240u8, 223u8, 203u8, 18u8, 104u8, 226u8, 216u8, 99u8, 240u8, 219u8, 8u8, 233u8, 166u8, 45u8],
        ) => "Tezry",
        (
            &[6u8, 161u8, 164u8],
            &[163u8, 121u8, 18u8, 190u8, 221u8, 169u8, 249u8, 235u8, 217u8, 7u8, 63u8, 238u8, 178u8, 66u8, 239u8, 113u8, 251u8, 244u8, 150u8, 184u8],
        ) => "Ceibo XTZ",
        (
            &[6u8, 161u8, 159u8],
            &[105u8, 195u8, 152u8, 121u8, 42u8, 74u8, 107u8, 60u8, 99u8, 242u8, 130u8, 79u8, 242u8, 195u8, 166u8, 227u8, 148u8, 211u8, 176u8, 166u8],
        ) => "Hyperblocks",
        (
            &[6u8, 161u8, 159u8],
            &[75u8, 205u8, 14u8, 43u8, 75u8, 119u8, 125u8, 105u8, 249u8, 89u8, 161u8, 8u8, 59u8, 180u8, 44u8, 47u8, 54u8, 54u8, 72u8, 77u8],
        ) => "Coinone",
        (
            &[6u8, 161u8, 159u8],
            &[102u8, 237u8, 3u8, 95u8, 30u8, 142u8, 21u8, 59u8, 36u8, 152u8, 154u8, 88u8, 119u8, 215u8, 230u8, 26u8, 12u8, 40u8, 249u8, 42u8],
        ) => "Stake House",
        (
            &[6u8, 161u8, 159u8],
            &[173u8, 39u8, 28u8, 54u8, 85u8, 110u8, 203u8, 203u8, 61u8, 108u8, 28u8, 231u8, 127u8, 254u8, 26u8, 129u8, 85u8, 252u8, 79u8, 96u8],
        ) => "Imma Baker",
        (
            &[6u8, 161u8, 159u8],
            &[113u8, 115u8, 231u8, 211u8, 178u8, 15u8, 56u8, 164u8, 48u8, 239u8, 60u8, 38u8, 128u8, 0u8, 47u8, 3u8, 26u8, 62u8, 175u8, 196u8],
        ) => "POS Bakerz",
        (
            &[6u8, 161u8, 159u8],
            &[236u8, 32u8, 36u8, 89u8, 20u8, 107u8, 185u8, 159u8, 38u8, 206u8, 37u8, 174u8, 169u8, 62u8, 5u8, 192u8, 201u8, 139u8, 227u8, 7u8],
        ) => "Tezos Suisse",
        (
            &[6u8, 161u8, 159u8],
            &[64u8, 27u8, 227u8, 173u8, 135u8, 168u8, 21u8, 182u8, 114u8, 8u8, 196u8, 181u8, 151u8, 38u8, 255u8, 65u8, 206u8, 204u8, 186u8, 252u8],
        ) => "Baking Tacos",
        (
            &[6u8, 161u8, 159u8],
            &[230u8, 189u8, 230u8, 116u8, 229u8, 18u8, 242u8, 253u8, 82u8, 25u8, 215u8, 147u8, 118u8, 126u8, 138u8, 154u8, 3u8, 136u8, 117u8, 131u8],
        ) => "Hodl.farm",
        (
            &[6u8, 161u8, 159u8],
            &[198u8, 110u8, 13u8, 169u8, 187u8, 43u8, 180u8, 21u8, 95u8, 229u8, 34u8, 109u8, 28u8, 30u8, 239u8, 203u8, 131u8, 167u8, 38u8, 132u8],
        ) => "Tezos Ninja",
        (
            &[6u8, 161u8, 159u8],
            &[188u8, 58u8, 167u8, 252u8, 61u8, 198u8, 102u8, 242u8, 131u8, 203u8, 158u8, 31u8, 19u8, 219u8, 160u8, 88u8, 17u8, 208u8, 48u8, 232u8],
        ) => "Clutch Oven",
        (
            &[6u8, 161u8, 159u8],
            &[109u8, 110u8, 182u8, 173u8, 158u8, 6u8, 177u8, 192u8, 205u8, 198u8, 163u8, 16u8, 33u8, 196u8, 49u8, 161u8, 174u8, 171u8, 185u8, 94u8],
        ) => "Tezetetic",
        (
            &[6u8, 161u8, 159u8],
            &[171u8, 184u8, 1u8, 144u8, 63u8, 171u8, 90u8, 32u8, 191u8, 59u8, 221u8, 241u8, 48u8, 94u8, 45u8, 5u8, 99u8, 120u8, 127u8, 110u8],
        ) => "Tezos Vote",
        (
            &[6u8, 161u8, 159u8],
            &[5u8, 230u8, 153u8, 229u8, 235u8, 215u8, 154u8, 89u8, 25u8, 152u8, 161u8, 216u8, 179u8, 242u8, 147u8, 54u8, 108u8, 240u8, 11u8, 187u8],
        ) => "Tez-Baking",
        (
            &[6u8, 161u8, 159u8],
            &[89u8, 93u8, 88u8, 70u8, 182u8, 48u8, 6u8, 46u8, 31u8, 27u8, 75u8, 165u8, 93u8, 182u8, 3u8, 125u8, 76u8, 188u8, 223u8, 172u8],
        ) => "XTZ Bakery II",
        (
            &[6u8, 161u8, 159u8],
            &[248u8, 132u8, 93u8, 210u8, 9u8, 23u8, 86u8, 81u8, 254u8, 193u8, 228u8, 84u8, 120u8, 244u8, 72u8, 115u8, 171u8, 241u8, 204u8, 187u8],
        ) => "Tz Envoy",
        (
            &[6u8, 161u8, 159u8],
            &[34u8, 106u8, 86u8, 174u8, 22u8, 216u8, 211u8, 151u8, 189u8, 27u8, 193u8, 20u8, 16u8, 183u8, 238u8, 51u8, 108u8, 225u8, 255u8, 133u8],
        ) => "Tezos Kitchen",
        (
            &[6u8, 161u8, 159u8],
            &[103u8, 105u8, 241u8, 157u8, 17u8, 207u8, 35u8, 222u8, 109u8, 250u8, 63u8, 67u8, 188u8, 86u8, 191u8, 124u8, 225u8, 234u8, 148u8, 101u8],
        ) => "Shake \'n Bake",
        (
            &[6u8, 161u8, 159u8],
            &[7u8, 0u8, 193u8, 237u8, 121u8, 242u8, 94u8, 9u8, 172u8, 152u8, 215u8, 142u8, 181u8, 120u8, 238u8, 185u8, 192u8, 69u8, 95u8, 169u8],
        ) => "Stir Delegate",
        (
            &[6u8, 161u8, 159u8],
            &[147u8, 0u8, 251u8, 203u8, 115u8, 224u8, 221u8, 90u8, 67u8, 96u8, 254u8, 83u8, 248u8, 161u8, 82u8, 81u8, 123u8, 103u8, 201u8, 73u8],
        ) => "Stake Capital",
        (
            &[6u8, 161u8, 159u8],
            &[76u8, 133u8, 100u8, 171u8, 88u8, 224u8, 183u8, 74u8, 109u8, 222u8, 229u8, 114u8, 21u8, 148u8, 186u8, 190u8, 143u8, 163u8, 54u8, 244u8],
        ) => "Figment Networks",
        (
            &[6u8, 161u8, 159u8],
            &[254u8, 216u8, 106u8, 194u8, 23u8, 46u8, 56u8, 65u8, 187u8, 61u8, 161u8, 238u8, 150u8, 156u8, 78u8, 97u8, 145u8, 99u8, 162u8, 174u8],
        ) => "TEZWHALE",
        (
            &[6u8, 161u8, 159u8],
            &[208u8, 230u8, 126u8, 185u8, 59u8, 106u8, 203u8, 130u8, 244u8, 169u8, 249u8, 114u8, 140u8, 236u8, 50u8, 40u8, 51u8, 208u8, 208u8, 67u8],
        ) => "Money every 3 days (OLD)",
        (
            &[6u8, 161u8, 159u8],
            &[28u8, 108u8, 205u8, 152u8, 237u8, 100u8, 255u8, 100u8, 220u8, 1u8, 101u8, 10u8, 52u8, 249u8, 54u8, 21u8, 112u8, 99u8, 57u8, 92u8],
        ) => "Money every 3 days",
        (
            &[6u8, 161u8, 159u8],
            &[160u8, 40u8, 242u8, 209u8, 8u8, 219u8, 86u8, 36u8, 185u8, 140u8, 17u8, 28u8, 35u8, 51u8, 67u8, 129u8, 252u8, 230u8, 238u8, 112u8],
        ) => "mamabaker",
        (
            &[6u8, 161u8, 159u8],
            &[103u8, 64u8, 152u8, 180u8, 250u8, 250u8, 49u8, 27u8, 54u8, 153u8, 190u8, 98u8, 113u8, 240u8, 198u8, 30u8, 192u8, 165u8, 205u8, 17u8],
        ) => "TezoShop",
        (
            &[6u8, 161u8, 159u8],
            &[63u8, 162u8, 218u8, 199u8, 74u8, 154u8, 227u8, 51u8, 172u8, 161u8, 169u8, 229u8, 151u8, 17u8, 55u8, 11u8, 52u8, 123u8, 63u8, 254u8],
        ) => "Tezos Alliance",
        (
            &[6u8, 161u8, 159u8],
            &[197u8, 0u8, 3u8, 87u8, 145u8, 4u8, 119u8, 145u8, 198u8, 177u8, 6u8, 151u8, 83u8, 86u8, 2u8, 253u8, 124u8, 212u8, 254u8, 3u8],
        ) => "Coinhouse Staking Services",
        (
            &[6u8, 161u8, 159u8],
            &[194u8, 129u8, 191u8, 242u8, 12u8, 207u8, 114u8, 231u8, 89u8, 105u8, 169u8, 184u8, 37u8, 201u8, 14u8, 53u8, 51u8, 15u8, 131u8, 57u8],
        ) => "Steak.and.Bake",
        (
            &[6u8, 161u8, 159u8],
            &[98u8, 166u8, 117u8, 230u8, 59u8, 94u8, 140u8, 179u8, 74u8, 35u8, 201u8, 243u8, 96u8, 164u8, 44u8, 158u8, 44u8, 236u8, 49u8, 222u8],
        ) => "AlphaTezos",
        (
            &[6u8, 161u8, 159u8],
            &[253u8, 89u8, 207u8, 6u8, 17u8, 126u8, 96u8, 158u8, 250u8, 248u8, 90u8, 191u8, 99u8, 216u8, 153u8, 156u8, 234u8, 132u8, 101u8, 66u8],
        ) => "Tezos Japan",
        (
            &[6u8, 161u8, 159u8],
            &[241u8, 213u8, 136u8, 66u8, 46u8, 117u8, 3u8, 126u8, 203u8, 214u8, 0u8, 105u8, 91u8, 140u8, 162u8, 152u8, 223u8, 31u8, 143u8, 225u8],
        ) => "Tez Dispensery",
        (
            &[6u8, 161u8, 159u8],
            &[153u8, 69u8, 147u8, 163u8, 31u8, 135u8, 39u8, 126u8, 158u8, 140u8, 90u8, 152u8, 244u8, 83u8, 16u8, 34u8, 58u8, 221u8, 118u8, 164u8],
        ) => "Ateza",
        (
            &[6u8, 161u8, 159u8],
            &[49u8, 62u8, 143u8, 253u8, 131u8, 21u8, 158u8, 136u8, 161u8, 144u8, 47u8, 78u8, 81u8, 86u8, 252u8, 218u8, 36u8, 81u8, 236u8, 231u8],
        ) => "YieldWallet.io",
        (
            &[6u8, 161u8, 159u8],
            &[74u8, 210u8, 67u8, 208u8, 40u8, 66u8, 2u8, 73u8, 54u8, 96u8, 18u8, 128u8, 146u8, 153u8, 243u8, 178u8, 122u8, 252u8, 171u8, 229u8],
        ) => "Staking Team",
        (
            &[6u8, 161u8, 159u8],
            &[20u8, 141u8, 70u8, 38u8, 39u8, 172u8, 38u8, 104u8, 229u8, 219u8, 205u8, 40u8, 13u8, 245u8, 203u8, 210u8, 138u8, 141u8, 64u8, 177u8],
        ) => "Morpheus Tezos",
        (
            &[6u8, 161u8, 159u8],
            &[215u8, 166u8, 90u8, 100u8, 115u8, 79u8, 218u8, 119u8, 55u8, 142u8, 5u8, 146u8, 95u8, 214u8, 33u8, 170u8, 169u8, 45u8, 199u8, 203u8],
        ) => "Baking Team",
        (
            &[6u8, 161u8, 159u8],
            &[162u8, 57u8, 242u8, 113u8, 51u8, 190u8, 245u8, 251u8, 102u8, 87u8, 127u8, 5u8, 242u8, 246u8, 44u8, 89u8, 66u8, 58u8, 177u8, 223u8],
        ) => "Everstake",
        (
            &[6u8, 161u8, 159u8],
            &[28u8, 108u8, 205u8, 152u8, 237u8, 100u8, 255u8, 100u8, 220u8, 1u8, 101u8, 10u8, 52u8, 249u8, 54u8, 21u8, 112u8, 99u8, 57u8, 92u8],
        ) => "Money Every 3 Days",
        _ => return Err(BakerNotFound),
    };
    Ok(PIC::new(out).into_inner())
}
/// This structs represents the expected schematic of the baker dat
///
/// Here it's used to read data more easily for the tests
struct KnownBaker {
    #[serde(alias = "bakerName")]
    name: String,
    #[serde(alias = "bakerAccount")]
    addr: String,
}
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::core::fmt::Debug for KnownBaker {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match *self {
            KnownBaker {
                name: ref __self_0_0,
                addr: ref __self_0_1,
            } => {
                let debug_trait_builder =
                    &mut ::core::fmt::Formatter::debug_struct(f, "KnownBaker");
                let _ =
                    ::core::fmt::DebugStruct::field(debug_trait_builder, "name", &&(*__self_0_0));
                let _ =
                    ::core::fmt::DebugStruct::field(debug_trait_builder, "addr", &&(*__self_0_1));
                ::core::fmt::DebugStruct::finish(debug_trait_builder)
            }
        }
    }
}
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::core::clone::Clone for KnownBaker {
    #[inline]
    fn clone(&self) -> KnownBaker {
        match *self {
            KnownBaker {
                name: ref __self_0_0,
                addr: ref __self_0_1,
            } => KnownBaker {
                name: ::core::clone::Clone::clone(&(*__self_0_0)),
                addr: ::core::clone::Clone::clone(&(*__self_0_1)),
            },
        }
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for KnownBaker {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = match _serde::Serializer::serialize_struct(
                __serializer,
                "KnownBaker",
                false as usize + 1 + 1,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "name",
                &self.name,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "addr",
                &self.addr,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for KnownBaker {
        fn deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            enum __Field {
                __field0,
                __field1,
                __ignore,
            }
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(__formatter, "field identifier")
                }
                fn visit_u64<__E>(self, __value: u64) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "bakerName" => _serde::__private::Ok(__Field::__field0),
                        "name" => _serde::__private::Ok(__Field::__field0),
                        "bakerAccount" => _serde::__private::Ok(__Field::__field1),
                        "addr" => _serde::__private::Ok(__Field::__field1),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"bakerName" => _serde::__private::Ok(__Field::__field0),
                        b"name" => _serde::__private::Ok(__Field::__field0),
                        b"bakerAccount" => _serde::__private::Ok(__Field::__field1),
                        b"addr" => _serde::__private::Ok(__Field::__field1),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(__deserializer, __FieldVisitor)
                }
            }
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<KnownBaker>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = KnownBaker;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(__formatter, "struct KnownBaker")
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 =
                        match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(_serde::de::Error::invalid_length(
                                    0usize,
                                    &"struct KnownBaker with 2 elements",
                                ));
                            }
                        };
                    let __field1 =
                        match match _serde::de::SeqAccess::next_element::<String>(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(_serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct KnownBaker with 2 elements",
                                ));
                            }
                        };
                    _serde::__private::Ok(KnownBaker {
                        name: __field0,
                        addr: __field1,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<String> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<String> = _serde::__private::None;
                    while let _serde::__private::Some(__key) =
                        match _serde::de::MapAccess::next_key::<__Field>(&mut __map) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        }
                    {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("name"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    match _serde::de::MapAccess::next_value::<String>(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("addr"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    match _serde::de::MapAccess::next_value::<String>(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                                );
                            }
                            _ => {
                                let _ = match _serde::de::MapAccess::next_value::<
                                    _serde::de::IgnoredAny,
                                >(&mut __map)
                                {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => {
                            match _serde::__private::de::missing_field("name") {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            }
                        }
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            match _serde::__private::de::missing_field("addr") {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            }
                        }
                    };
                    _serde::__private::Ok(KnownBaker {
                        name: __field0,
                        addr: __field1,
                    })
                }
            }
            const FIELDS: &'static [&'static str] = &["name", "addr"];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "KnownBaker",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<KnownBaker>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
extern crate test;
#[cfg(test)]
#[rustc_test_marker]
pub const unroll_check: test::TestDescAndFn = test::TestDescAndFn {
    desc: test::TestDesc {
        name: test::StaticTestName("unroll_check"),
        ignore: false,
        allow_fail: false,
        compile_fail: false,
        no_run: false,
        should_panic: test::ShouldPanic::No,
        test_type: test::TestType::IntegrationTest,
    },
    testfn: test::StaticTestFn(|| test::assert_test_result(unroll_check())),
};
fn unroll_check() {
    let path = "../app/vendor/BakersRegistryCoreUnfilteredData.json";
    let file = std::fs::File::open(path).unwrap_or_else(|err| {
        {
            ::std::rt::begin_panic_fmt(&match match (
                &PathBuf::from("../app/vendor").canonicalize(),
                &err,
            ) {
                (arg0, arg1) => [
                    ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Debug::fmt),
                    ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Debug::fmt),
                ],
            } {
                ref args => unsafe {
                    ::core::fmt::Arguments::new_v1(
                        &["unable to open data file at: ", "; err="],
                        args,
                    )
                },
            })
        }
    });
    let data: Vec<KnownBaker> =
        serde_json::from_reader(file).expect("unable to read JSON data from file");
    let entry = &data[0];
    let addr = bs58::decode(&entry.addr)
        .into_vec()
        .expect("entry addr wasn't valid base58");
    let addr = addr.as_slice();
    let prefix = {
        {
            #[inline]
            unsafe fn as_array<T>(slice: &[T]) -> &[T; 3] {
                &*(slice.as_ptr() as *const [_; 3])
            }
            let offset = 0;
            let slice = &addr[offset..offset + 3];
            #[allow(unused_unsafe)]
            unsafe {
                as_array(slice)
            }
        }
    };
    let hash = {
        {
            #[inline]
            unsafe fn as_array<T>(slice: &[T]) -> &[T; 20] {
                &*(slice.as_ptr() as *const [_; 20])
            }
            let offset = 3;
            let slice = &addr[offset..offset + 20];
            #[allow(unused_unsafe)]
            unsafe {
                as_array(slice)
            }
        }
    };
    let name = baker_lookup(prefix, hash).expect("couldn't find baker in lookup");
    {
        match (&name, &entry.name.as_str()) {
            (left_val, right_val) => {
                if !(*left_val == *right_val) {
                    let kind = ::core::panicking::AssertKind::Eq;
                    ::core::panicking::assert_failed(
                        kind,
                        &*left_val,
                        &*right_val,
                        ::core::option::Option::None,
                    );
                }
            }
        }
    };
}
#[rustc_main]
pub fn main() -> () {
    extern crate test;
    test::test_main_static(&[&unroll_check])
}
